#include <iostream>
#include "task2.h"

// Вопрос 1: Статический член класса - это член, который принадлежит всем объектам класса, а не конкретному объекту. 
// Он отличается тем, что существует в единственном экземпляре для всего класса.
// 
// Вопрос 2: Преимущества: экономия памяти, доступность без создания объекта. 
// Недостатки: ограничение доступа к нему только через имя класса, потенциальная конкуренция за доступ в многопоточной среде.
// 
// Вопрос 3: Да, можно объявлять статические функции-члены. 
// Они не могут обращаться к нестатическим членам без указания конкретного объекта.
// 
// Вопрос 4: Нет, статический метод не может обращаться к нестатическим членам, так как они связаны с конкретным объектом.
// 
// Вопрос 5: Используется для обозначения членов класса, которые должны быть общими для всех экземпляров класса или не зависеть от состояния объекта.

class Counter {
private:
    static int count;

public:
    Counter() { count++; }
    Counter(int) { count++; }
    ~Counter() { count--; }

    static int getCount() { return count; }
    static void resetCount() { count = 0; }
};

int Counter::count = 0;

void task2() {
    Counter c1;
    Counter c2(10);

    std::cout << "Текущее количество объектов: " << Counter::getCount() << std::endl;

    Counter c3;

    std::cout << "Текущее количество объектов после создания c3: " << Counter::getCount() << std::endl;

    c2.resetCount();

    std::cout << "Количество объектов после сброса: " << Counter::getCount() << std::endl;
}